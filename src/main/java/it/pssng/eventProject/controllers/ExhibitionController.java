/**
 * File: ExhibitionController.java
 */

package it.pssng.eventProject.controllers;

import it.pssng.eventProject.entities.ArtWork;
import it.pssng.eventProject.services.ArtWorkService;
import it.pssng.eventProject.services.LocationService;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

import java.util.List;

/**
 * The Rest Controller is the last piece of this simple implementation.
 * 
 * @RequestMapping annotation specify where all these operations can be executed
 *                 (example: https://pssngexample.xyz/api/entities)
 */

@RestController
@RequestMapping("/api/exhibitions")
public class ExhibitionController {

    private final ArtWorkService exhibitionService;

    @Autowired
    public ExhibitionController(ArtWorkService exhibitionService, LocationService locationService) {
        this.exhibitionService = exhibitionService;
    }

    /**
     * @GetMapping annotation specify that the method 'getAllExhibitions()' has to
     *             be executed when the client requests data through a
     *             GET request at the URL, for example,
     *             https://pssngexample.xyz/api/entities/all_exh
     */
    @Operation(summary = "Here you can get all the exhibition in the database. ")

    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "No errors found, you get all your exhibitions"),
            @ApiResponse(responseCode = "400", description = "Errors Founded", content = @Content),
            @ApiResponse(responseCode = "204", description = "No Exhibitions founds", content = @Content) })
    @GetMapping("/all_exh")
    public ResponseEntity<List<ArtWork>> getAllArtWorks() {
        List<ArtWork> returnTuples = exhibitionService.getAll();
        /**
         * In this method there are also handled errors in the request:
         * If the getAll function of exhibitionService does not return empty data, you
         * can return a response (with your data obv)
         * Otherwise, will be sent the no content response to the client
         */
        if (!returnTuples.isEmpty()) {
            return ResponseEntity.ok(returnTuples);
        } else {
            return ResponseEntity.noContent().build();
        }
    }

    @Operation(summary = "Here you can save a new exhibition. Dont mind to provide for a codeid for exhibition cause it is autogenerated")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success, you saved the new exhibitions in the db"),
            @ApiResponse(responseCode = "400", description = "Errors Founded in the request, please check the body ", content = @Content),
            @ApiResponse(responseCode = "500", description = "Internal server error, can not save the new exhibition in the db", content = @Content) })
    @PostMapping("/save_exh")
    public ResponseEntity<ArtWork> saveExhibition(@RequestBody ArtWork data) {
        ArtWork save = exhibitionService.saveExhibition(data);
        return ResponseEntity.ok(save);
    }

    @Operation(summary = "Here you cen get the exhibition by id, give the id as a path variable")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success, the output will show the exhibition that you requested by id"),
            @ApiResponse(responseCode = "204", description = "Not found, the exhibition whit the id that you provided doesn't exist"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    @GetMapping("/findById/{exhibitionId}")
    public ResponseEntity<ArtWork> getExhibitionById(@PathVariable Long exhibitionId) {
        // Aggiustata, problemino di logica sull if, per un end point piu chiaro ho
        // ggiunto anche findById -Carmela
        ArtWork foundExhibition = exhibitionService.getExhibitionById(exhibitionId);
        if (foundExhibition != null) {
            return ResponseEntity.ok(foundExhibition);
        } else {
            return ResponseEntity.noContent().build();
        }
    }

    @Operation(summary = "Here you can save a new exhibition. Dont mind to provide for a codeid for exhibition cause it is autogenerated")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Success, you got the list of exhibitions filtered by location"),
            @ApiResponse(responseCode = "204", description = "No Content, empty list", content = @Content),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content) })
    @GetMapping("/byLocation/{exhibitionLocation}")
    public ResponseEntity<List<ArtWork>> getExhibitionByLocation(@PathVariable Long exhibitionLocation) {
        // risolto, c'era un problema con la query in getExhibitionByLocation -Carmela
        List<ArtWork> foundExhibitions = exhibitionService.getExhibitionByLocation(exhibitionLocation);
        if (!foundExhibitions.isEmpty()) {
            return ResponseEntity.ok(foundExhibitions);
        } else {
            return ResponseEntity.noContent().build();
        }

    }

}
